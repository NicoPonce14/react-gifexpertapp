{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAST,EACTU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCPlBG,EAAQ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEdG,EAFc,gBAGCA,EAAIC,OAHL,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAYbM,GAZa,4CAAH,sDCCRO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,yBAAKc,UAAU,4DACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCDHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAQ,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAbAC,qBAAU,WACNxB,EAASC,GACJwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAI1B,CAACpB,IAGIqB,EDhBuBK,CAAa1B,GAA/Ba,EAFuB,EAE5BN,KAAYa,EAFgB,EAEhBA,QAEnB,OACI,oCACI,4BAAKpB,GACJoB,GAAW,uBAAGJ,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aAEPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACAiB,IAAKjB,EAAIC,IACLD,UEcbkB,EA1BO,WAAO,IAAD,EAEY1C,mBAAS,CAAC,oBAFtB,mBAEjB2C,EAFiB,KAEL5C,EAFK,KAKxB,OACI,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,SAAUA,UCnB9B8B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.787ebd21.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInputChange = (e)=>{\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2) {\r\n            setCategories(cats=>[ inputValue,...cats,]);\r\n            setinputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            \r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifts = async(category) => {\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=mPCGn4gOUlRtlxCEeIClie99n3PvJf2A`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n\r\n    const gifs = data.map(img=> {\r\n        return{\r\n            id:img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img=>(\r\n                        <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifts } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=> {\r\n        getGifts(category)\r\n            .then(imgs => {\r\n                \r\n                    setstate({\r\n                        data: imgs,\r\n                        loading:false\r\n                    });\r\n                    \r\n            })\r\n    },[category])\r\n    \r\n\r\n    return state;\r\n}","import React,{useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\n const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Hunter x Hunter']);\r\n\r\n   \r\n    return(\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/>\r\n\r\n        \r\n\r\n        <ol>\r\n            {\r\n                categories.map( category => (\r\n                    <GifGrid \r\n                    key={category}\r\n                    category={category}/>\r\n                ))\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from '../src/GifExpertApp'\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}